// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Johannes L. Mayrhofer",
            "email": "mayrhofer.johannes@litec.ac.at"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all available users in JSON array format",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users",
                    "GET"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer \u003ctoken\u003e (minimum security clearance required: User)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "400": {
                        "description": "error while querying data",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    },
                    "401": {
                        "description": "permission denied",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stores a new user with the given parameters and dispatches sign-up-event to the given storage controller to scan the new users card. Optional Fields: 'privileged' (default: false), 'reader' (default: null)\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users",
                    "POST"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "creator",
                        "name": "Creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/response.CreateHandler.UserCreator"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer \u003ctoken\u003e (minimum security clearance required: Anonymous)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CreateHandler.UserEmailResponse"
                        }
                    },
                    "400": {
                        "description": "error while querying data",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    },
                    "401": {
                        "description": "permission denied",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/email/{email}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a single user whose email attribute matches the given path parameter, else empty object.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users",
                    "GET",
                    "Email"
                ],
                "summary": "Filter users by email attribute",
                "parameters": [
                    {
                        "type": "string",
                        "description": "has to match: ` + "`" + `[a-zA-Z0-9@._]{10,64}}` + "`" + `",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer \u003ctoken\u003e (minimum security clearance required: User)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "error while querying data",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    },
                    "401": {
                        "description": "permission denied",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing user whose email attribute matches the given path parameter. Request may only contain the attributes which are to be updated, otherwise unintended fields may be updated as well.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users",
                    "PUT"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "description": "optionals: privileged (default: false), reader (default: null)",
                        "name": "Creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/response.UpdateHandler.UserUpdater"
                        }
                    },
                    {
                        "type": "string",
                        "description": "has to match: ` + "`" + `[a-zA-Z0-9@._]{10,64}}` + "`" + `",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer \u003ctoken\u003e (minimum security clearance required: User)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "error while querying data",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    },
                    "401": {
                        "description": "permission denied",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing user whose email attribute matches the given path parameter. User will not be deleted if they are referenced in any existing Reservations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users",
                    "DELETE"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "has to match: ` + "`" + `[a-zA-Z0-9@._]{10,64}}` + "`" + `",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer \u003ctoken\u003e (minimum security clearance required: Administrator)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error while querying data",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    },
                    "401": {
                        "description": "permission denied",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorStatusWrapperResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "privileged": {
                    "type": "boolean"
                },
                "reader": {
                    "type": "string"
                }
            }
        },
        "response.CreateHandler.UserCreator": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "privileged": {
                    "type": "boolean"
                },
                "reader": {
                    "type": "string"
                },
                "storage": {
                    "type": "string"
                }
            }
        },
        "response.CreateHandler.UserEmailResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "response.UpdateHandler.UserUpdater": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "privileged": {
                    "type": "boolean"
                },
                "reader": {
                    "type": "string"
                }
            }
        },
        "util.ErrorStatusResponse": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "util.ErrorStatusWrapperResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/util.ErrorStatusResponse"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:7171",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "CardStorageManagement API Documentation",
	Description:      "RESTful HTTP Interface Reference",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
